                Assessing Variable Types

  1. The census dataframe is composed of simulated census data to represent demographics of a small community in the U.S. Call the .head() method on the census dataframe and print 
the output to view the first five rows.
  2. Review the dataframe description and values returned by .head() to assess the variable types of each of the variables. This is an important step to understand what preprocessing 
will be necessary to work with the data.
//
print(census.head())                              RESULT:
                                                            first_name	last_name	  birth_year	voted	  num_children	income_year  	higher_tax	    marital_status
                                                          0	Denise	    Ratke	      2005	      False	  0	            92129.41	    disagree	      single
                                                          1	Hali	      Cummerata	  1987	      False	  0	            75649.17	    neutral	        divorced
                                                          2	Salomon	    Orn	        1992	      True	  2	            166313.45	    agree	          single
                                                          3	Sarina	    Schiller	  1965	      False	  2	            71704.81	    strongly agree	married
                                                          4	Gust	      Abernathy	  1945	      False	  2	            143316.08	    agree	          married
  3. Compare the values returned from the .head() method with the data types of each variable by calling .dtypes on the census dataframe and print the result.
//
print(census.dtypes)                              RESULT:
                                                                    	    0
                                                          first_name	    object
                                                          last_name	      object
                                                          birth_year	    object
                                                          voted	          bool
                                                          num_children	  int64
                                                          income_year	    float64
                                                          higher_tax    	object
                                                          marital_status	object

                Inspecting Datatypes

  4. The manager of the census would like to know the average birth year of the respondents. We were able to see from .dtypes that birth_year has been assigned the str datatype whereas 
it should be expressed in int. Print the unique values of the variable using the .unique() method.
//
print(census['birth_year'].unique())              RESULT:
                                                          ['2005' '1987' '1992' '1965' '1945' '1951' '1963' '1949' '1950' '1971'
                                                           '2007' '1944' '1995' '1973' '1946' '1954' '1994' '1989' '1947' '1993'
                                                           '1976' '1984' 'missing' '1966' '1941' '2000' '1953' '1956' '1960' '2001'
                                                           '1980' '1955' '1985' '1996' '1968' '1979' '2006' '1962' '1981' '1959'
                                                           '1977' '1978' '1983' '1957' '1961' '1982' '2002' '1998' '1999' '1952'
                                                           '1940' '1986' '1958']

                Altering Data

  5. There appears to be a missing value in the birth_year column. With some research you find that the respondentâ€™s birth year is 1967. Use the .replace() method to replace the missing 
value with 1967, so that the data type can be changed to int. Then recheck the values in birth_year by calling the .unique() method and printing the results.
//


