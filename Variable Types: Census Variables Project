                Assessing Variable Types

  1. The census dataframe is composed of simulated census data to represent demographics of a small community in the U.S. Call the .head() method on the census dataframe and print 
the output to view the first five rows.
  2. Review the dataframe description and values returned by .head() to assess the variable types of each of the variables. This is an important step to understand what preprocessing 
will be necessary to work with the data.
//
print(census.head())                              RESULT:
                                                            first_name	last_name	  birth_year	voted	  num_children	income_year  	higher_tax	    marital_status
                                                          0	Denise	    Ratke	      2005	      False	  0	            92129.41	    disagree	      single
                                                          1	Hali	      Cummerata	  1987	      False	  0	            75649.17	    neutral	        divorced
                                                          2	Salomon	    Orn	        1992	      True	  2	            166313.45	    agree	          single
                                                          3	Sarina	    Schiller	  1965	      False	  2	            71704.81	    strongly agree	married
                                                          4	Gust	      Abernathy	  1945	      False	  2	            143316.08	    agree	          married
  3. Compare the values returned from the .head() method with the data types of each variable by calling .dtypes on the census dataframe and print the result.
//
print(census.dtypes)                              RESULT:
                                                                    	    0
                                                          first_name	    object
                                                          last_name	      object
                                                          birth_year	    object
                                                          voted	          bool
                                                          num_children	  int64
                                                          income_year	    float64
                                                          higher_tax    	object
                                                          marital_status	object

                Inspecting Datatypes

  4. The manager of the census would like to know the average birth year of the respondents. We were able to see from .dtypes that birth_year has been assigned the str datatype whereas 
it should be expressed in int. Print the unique values of the variable using the .unique() method.
//
print(census['birth_year'].unique())              RESULT:
                                                          ['2005' '1987' '1992' '1965' '1945' '1951' '1963' '1949' '1950' '1971'
                                                           '2007' '1944' '1995' '1973' '1946' '1954' '1994' '1989' '1947' '1993'
                                                           '1976' '1984' 'missing' '1966' '1941' '2000' '1953' '1956' '1960' '2001'
                                                           '1980' '1955' '1985' '1996' '1968' '1979' '2006' '1962' '1981' '1959'
                                                           '1977' '1978' '1983' '1957' '1961' '1982' '2002' '1998' '1999' '1952'
                                                           '1940' '1986' '1958']

                Altering Data

  5. There appears to be a missing value in the birth_year column. With some research you find that the respondent’s birth year is 1967. Use the .replace() method to replace the missing 
value with 1967, so that the data type can be changed to int. Then recheck the values in birth_year by calling the .unique() method and printing the results.
//
census['birth_year'] = census['birth_year'].replace(['missing'], 1967)
print(census['birth_year'].unique())              RESULT:
                                                          ['2005' '1987' '1992' '1965' '1945' '1951' '1963' '1949' '1950' '1971'
                                                           '2007' '1944' '1995' '1973' '1946' '1954' '1994' '1989' '1947' '1993'
                                                           '1976' '1984' 1967 '1966' '1941' '2000' '1953' '1956' '1960' '2001'
                                                           '1980' '1955' '1985' '1996' '1968' '1979' '2006' '1962' '1981' '1959'
                                                           '1977' '1978' '1983' '1957' '1961' '1982' '2002' '1998' '1999' '1952'
                                                           '1940' '1986' '1958']
  6. Now that we have adjusted the values in the birth_year variable, change the datatype from str to int and print the datatypes of the census dataframe with .dtypes.
//
census['birth_year'] = census['birth_year'].astype('int')
print(census.dtypes)                              RESULT:
                                                                    	    0
                                                          first_name	    object
                                                          last_name      	object
                                                          birth_year	    int64
                                                          voted          	bool
                                                          num_children	  int64
                                                          income_year    	float64
                                                          higher_tax    	object
                                                          marital_status	object
  7. Having assigned birth_year to the appropriate data type, print the average birth year of the respondents to the census using the pandas .mean() method.
//
print(census['birth_year'].mean())              RESULT:
                                                          1973.4
  8. Your manager would like to set an order to the higher_tax variable so that: strongly disagree < disagree < neutral < agree < strongly agree. Convert the higher_tax variable 
to the category data type with the appropriate order, then print the new order using the .unique() method.
//
census['higher_tax'] = pd.Categorical(census['higher_tax'], ['strongly disagree', 'disagree', 'neutral', 'agree', 'strongly agree'], ordered = True)
print(census['higher_tax'].unique())            RESULT:
                                                          [disagree, neutral, agree, strongly agree, strongly disagree]
                                                          Categories (5, object): [strongly disagree < disagree < neutral < agree < strongly agree]
  9. Your manager would also like to know the median sentiment of the respondents on the issue of higher taxes for the wealthy. Label encode the higher_tax variable and print 
the median using the pandas .median() method.
//
census['higher_tax'] = census['higher_tax'].cat.codes
print(census['higher_tax'].median())            RESULT:
                                                          2.0
  10. Your manager is interested in using machine learning models on the census data in the future. To help, let’s One-Hot Encode marital_status to create binary variables of each category. 
Use the pandas get_dummies() method to One-Hot Encode the marital_status variable. Print the first five rows of the new dataframe with the .head() method. Note that you’ll have 
to scroll to the right or expand the web-browser to see the dummy variables.
//
census = pd.get_dummies(data = census, columns=['marital_status'])
print(census.head())                            RESULT:
                                                          first_name	last_name	  birth_year	voted	  num_children	income_year	higher_tax	marital_status_divorced	  marital_status_married	  marital_status_single	  marital_status_widowed
                                                        0	Denise	    Ratke	      2005	      False	  0            	92129.41	  1	          0	                        0	                        1	                      0
                                                        1	Hali	      Cummerata	  1987	      False	  0	            75649.17	  2	          1	                        0	                        0	                      0
                                                        2	Salomon	    Orn	        1992	      True	  2            	166313.45	  3	          0	                        0	                        1	                      0
                                                        3	Sarina	    Schiller  	1965	      False	  2            	71704.81	  4	          0	                        1	                        0	                      0
                                                        4	Gust	      Abernathy	  1945	      False	  2	            143316.08	  3	          0	                        1	                        0	                      0
  11. Congratulations! You have used your variable skills to help the census team with managing their data. Feel free to explore the data further. There are additional operations 
you can perform on the data, such as:
              --- Create a new variable called marital_codes by Label Encoding the marital_status variable. This could help the Census team use machine learning to predict if a respondent 
                  thinks the wealthy should pay higher taxes based on their marital status.
//
census['marital_status'] = pd.Categorical(census['marital_status'], ['single', 'married', 'divorced', 'widowed'], ordered=True)
census['marital_codes'] = census['marital_status'].cat.codes
print(census['marital_status'].head(10))             RESULT:
                                                          marital_status
                                                        0	single
                                                        1	divorced
                                                        2	single
                                                        3	married
                                                        4	married
                                                        5	widowed
                                                        6	divorced
                                                        7	single
                                                        8	single
                                                        9	married
print(census['marital_codes'].head(10))              RESULT:
                                                          marital_codes
                                                        0	0
                                                        1	2
                                                        2	0
                                                        3	1
                                                        4	1
                                                        5	3
                                                        6	2
                                                        7	0
                                                        8	0
                                                        9	1
              --- Create a new variable called age_group, which groups respondents based on their birth year. The groups should be in five-year increments, e.g., 25-30, 31-35, etc. 
Then label encode the age_group variable to assist the Census team in the event they would like to use machine learning to predict if a respondent thinks the wealthy should pay 
higher taxes based on their age group.
//
