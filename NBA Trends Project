GIVEN:
import numpy as np
import pandas as pd
from scipy.stats import pearsonr, chi2_contingency
import matplotlib.pyplot as plt
import seaborn as sns
import codecademylib3
np.set_printoptions(suppress=True, precision = 2)
nba = pd.read_csv('./nba_games.csv')
  # Subset Data to 2010 Season, 2014 Season
nba_2010 = nba[nba.year_id == 2010]
nba_2014 = nba[nba.year_id == 2014]
print(nba_2010.head())                                    RESULT:
                                                          game_id	      year_id	fran_id	  opp_fran	    game_location	  is_playoffs	pts	opp_pts	game_result	forecast	  point_diff
                                                    21717	200910270CLE	2010	  Celtics	  Cavaliers	    A	              0	          95	89	    W	          0.27747208	6
                                                    21718	200910280BOS	2010	  Celtics	  Hornets	      H	              0	          92	59	    W	          0.81461924	33
                                                    21719	200910280MIA	2010	  Knicks	  Heat	        A	              0	          93	115	    L	          0.25875455	-22
                                                    21720	200910280MIN	2010	  Nets	    Timberwolves	A	              0	          93	95	    L	          0.47515517	-2
                                                    21721	200910280OKC	2010	  Thunder	  Kings        	H	              0	          102	89	    W	          0.71676362	13
print(nba_2014.head())                                    RESULT:
                                                          game_id	      year_id	fran_id	  opp_fran	    game_location	  is_playoffs	pts	opp_pts	game_result	forecast	  point_diff
                                                    23468	201310300CLE	2014	  Nets	    Cavaliers	    A	              0	          94	98    	L	          0.61198127	-4
                                                    23469	201310300NYK	2014	  Knicks	  Bucks	        H	              0	          90	83    	W	          0.79315007	7
                                                    23470	201310300SAS	2014	  Spurs	    Grizzlies    	H	              0	          101	94	    W	          0.69297957	7
                                                    23471	201310300TOR	2014	  Celtics	  Raptors	      A	              0	          87	93	    L	          0.36123306	-6
                                                    23472	201310300UTA	2014	  Thunder	  Jazz	        A	              0	          101	98	    W	          0.52605593	3

                                      ANALYZING RELATIONSHIPS BETWEEN QUANT ANDCATEGORICAL
  1. 
In script.py, the data has been subsetted for you into two smaller datasets: games from 2010 (named nba_2010) and games from 2014 (named nba_2014). To start, let’s focus on the 2010 data.
Suppose you want to compare the knicks to the nets with respect to points earned per game. Using the pts column from the nba_2010 DataFrame, create two series named knicks_pts_10 
(fran_id = "Knicks") and nets_pts_10(fran_id = "Nets") that represent the points each team has scored in their games.
//
knicks_pts_10 = nba_2010.pts[nba_2010.fran_id == 'Knicks']
print(knicks_pts_10.head())                                    RESULT:
                                                                pts
                                                         21719	93
                                                         21725	100
                                                         21728	127
                                                         21734	117
                                                         21739	89
nets_pts_10 = nba_2010.pts[nba_2010.fran_id == 'Nets']
print(nets_pts_10.head())                                      RESULT:
                                                                pts
                                                         21720	93
                                                         21727	85
                                                         21730	104
                                                         21733	68
                                                         21738	94
  2.  Calculate the difference between the two teams’ average points scored and save the result as diff_means_2010. Based on this value, do you think fran_id and pts are associated? 
Why or why not?
//
knicks_mean = np.mean(knicks_pts_10)
print(knicks_mean)                                            RESULT:
                                                              102.10975609756098
nets_mean = np.mean(nets_pts_10)
print(nets_mean)                                              RESULT:
                                                              92.3780487804878
diff = knicks_mean - nets_mean
print(diff)                                                   RESULT:
                                                              9.731707317073173
            OR 
diff_means_2010 = knicks_pts_10.mean() - nets_pts_10.mean()
print(diff_means_2010)                                        RESULT:
                                                              9.731707317073173
  3. Rather than comparing means, it’s useful look at the full distribution of values to understand whether a difference in means is meaningful. Create a set of overlapping histograms 
that can be used to compare the points scored for the Knicks compared to the Nets. Use the series you created in the previous step (1) and the code below to create the plot. 
Do the distributions appear to be the same?
//
plt.hist(knicks_pts_10, color='blue', label='Knicks points', normed = True, alpha = 0.8)
plt.hist(nets_pts_10, color='red', label='Knicks points', normed = True, alpha = 0.8)
plt.legend()
plt.show()
  4. Now, let’s compare the 2010 games to 2014. Replicate the steps from the previous three exercises using nba_2014. First, calculate the mean difference between the two teams points 
scored. Save and print the value as diff_means_2014. Did the difference in points get larger or smaller in 2014? Then, plot the overlapping histograms. Does the mean difference you 
calculated make sense?
//
knicks_pts_14 = nba_2014.pts[nba_2014.fran_id == 'Knicks']
print(knicks_pts_14.head())                                    RESULT:
                                                                pts
                                                         23469	90
                                                         23473	81
                                                         23480	100
                                                         23486	97
                                                         23490	101
nets_pts_14 = nba_2014.pts[nba_2014.fran_id == 'Nets']
print(nets_pts_14.head())                                      RESULT:
                                                                pts
                                                         23468	94
                                                         23475	101
                                                         23482	86
                                                         23484	104
                                                         23494	108
diff_means_2014 = knicks_pts_14.mean() - nets_pts_14.mean()
print(diff_means_2014)                                         RESULT:
                                                               0.44706798131809933
plt.hist(knicks_pts_14, color='green', label='Knicks points', normed = True, alpha = 0.8)
plt.hist(nets_pts_14, color='yellow', label='Nets points', normed = True, alpha = 0.8)
plt.legend()
plt.show()
  5. For the remainder of this project, we’ll focus on data from 2010. Let’s now include all teams in the dataset and investigate the relationship between franchise and points scored 
per game. Using nba_2010, generate side-by-side boxplots with points scored (pts) on the y-axis and team (fran_id) on the x-axis. Is there any overlap between the boxes? 
Does this chart suggest that fran_id and pts are associated? Which pairs of teams, if any, earn different average scores per game?
//
plt.clf()
sns.boxplot(data = nba_2010, x='fran_id', y='pts')
plt.show()

                                      ANALYZING RELATIONSHIPS BETWEEN CATEGORICAL VARIABLES
  6. We’d like to know if teams tend to win more games at home compared to away. The variable game_result indicates whether a team won a particular game ('W' stands for “win” and 'L' 
stands for “loss”). The variable game_location indicates whether a team was playing at home or away ('H' stands for “home” and 'A' stands for “away”). Data scientists will often calculate 
a contingency table of frequencies to help them determine if categorical variables are associated. Calculate a table of frequencies that shows the counts of game_result and game_location.
Save your result as location_result_freq and print your result. Based on this table, do you think the variables are associated? 
//
result_location_freq_10 = pd.crosstab(nba_2010.game_result, nba_2010.game_location)
print(result_location_freq_10)                                 RESULT:
                                                               game_location    A    H
                                                               game_result            
                                                               L              133  105
                                                               W               92  120
  7. Convert this table of frequencies to a table of proportions and save the result as location_result_proportions. Print your result.
//
location_result_proportions = location_result_freq_10 / len(nba_2010)
print(location_result_proportions)                             RESULT:
                                                               game_location         A         H
                                                               game_result                      
                                                               L              0.295556  0.233333
                                                               W              0.204444  0.266667
  8. Using the contingency table we created in Task 6 (use the counts – NOT the proportions), calculate the expected contingency table (if there were no association) and the Chi-Square 
statistic and print your results. Does the actual contingency table look similar to the expected table — or different? Based on this output, do you think there is an association between 
these variables?
//
chi2, pval, dof, expected = chi2_contingency(location_result_freq_10)
print(np.round(expected))                                      RESULT:
                                                               [[119. 119.]
                                                                [106. 106.]]
print(chi2)                                                    RESULT:
                                                               6.501704455367053
  9. For each game, 538 has calculated the probability that each team will win the game. We want to know if teams with a higher probability of winning (according to 538) also tend to win 
games by more points. In the data, 538’s prediction is saved as forecast. The point_diff column gives the margin of victory/defeat for each team (positive values mean that the team won; 
negative values mean that they lost). Using nba_2010, calculate the covariance between forecast (538’s projected win probability) and point_diff (the margin of victory/defeat) in 
the dataset. Call this point_diff_forecast_cov. Save and print your result. Looking at the matrix, what is the covariance between these two variables?
//
point_diff_forecast_cov = np.cov(nba_2010.forecast, nba_2010.point_diff)
print(point_diff_forecast_cov)                                 RESULT:
                                                               [[  0.05   1.37]
                                                                [  1.37 186.56]]
print("The covariance between forecast and point difference is:") 
print(point_diff_forecast_cov[0][1])                           RESULT:
                                                               The covariance between forecast and point difference is:
                                                               1.3746125676458802
  10. Because 538’s forecast variable is reported as a probability (not a binary), we can calculate the strength of the correlation. Using nba_2010, calculate the correlation between 
forecast and point_diff. Call this point_diff_forecast_corr. Save and print your result. Does this value suggest an association between the two variables?
//
point_diff_forecast_corr, p=pearsonr(nba_2010.forecast, nba_2010.point_diff)
print(point_diff_forecast_corr)                                RESULT:
                                                               0.44020887084680815
  11. Generate a scatter plot of forecast (on the x-axis) and point_diff (on the y-axis). Does the correlation value make sense?
//
plt.clf()
plt.scatter(x=nba_2010.forecast, y=nba_2010.point_diff)
plt.show()                                                     RESULT: 
                                                               It does.
