You are a data scientist exploring data that looks at how certain diagnostic factors affect the diabetes outcome of women patients.
The dataset is from the National Institute of Diabetes and Digestive and Kidney Diseases. It contains the following columns:
  -  Pregnancies: Number of times pregnant
  -  Glucose: Plasma glucose concentration at 2 hours in an oral glucose tolerance test
  -  BloodPressure: Diastolic blood pressure
  -  SkinThickness: Triceps skinfold thickness
  -  Insulin: 2-Hour serum insulin
  -  BMI: Body mass index
  -  DiabetesPedigreeFunction: Diabetes pedigree function
  -  Age: Age (years)
  -  Outcome: Class variable (0 or 1)

                                INITIAL INSPECTION
  1. First, familiarize yourself with the dataset below. Look at each of the nine columns in the documentation. What do you expect each data type to be?
//
Pregnancies    Glucose    BloodPressure    SkinThickness    Insulin    BMI    DiabetesPedigreeFunction    Age    Outcome
6              148        72               35               0          33.6   0.627                       50     1
1              85         66               29               0          26.6   0.351                       31     0
8              183        64               0                0          23.3   0.672                       32     1
1              89         66               23               94         28.1   0.167                       21     0
0              137        40               35               168        43.1   2.288                       33     1
5              116        74               0                0          25.6   0.201                       30     0
3              78         50               32               88         31     0.248                       26     1
10             115        0                0                0          35.3   0.134                       29     0
  2. Next, let’s load in the diabetes data to start exploring. Load the data in a variable called diabetes_data and print the first few rows. Note: The data is stored 
in a file called diabetes.csv.
//
diabetes_data = pd.read_csv('diabetes.csv')
print(diabetes_data.head())                      RESULT:
                                      	Pregnancies	  Glucose	  BloodPressure	  SkinThickness	  Insulin	  BMI	  DiabetesPedigreeFunction	  Age  	Outcome
                                      0	6            	148	      72	            35            	0	        33.6 	0.627	                      50	  1
                                      1	1	            85	      66	            29	            0	        26.6	0.35100000000000003	        31	  0
                                      2	8	            183	      64	            0	              0	        23.3	0.672                      	32	  1
                                      3	1	            89	      66	            23	            94      	28.1	0.16699999999999998	        21	  0
                                      4	0	            137	      40	            35            	168      	43.1	2.2880000000000003	        33	  1
  3. How many columns (features) does the data contain?
//
print(len(diabetes_data.columns))                RESULT:
                                      	9
  4. How many rows (observations) does the data contain?
//
print(len(diabetes_data))                        RESULT:
                                      	768

                                FURTHER INSPECTION
  5. Let’s inspect diabetes_data further. Do any of the columns in the data contain null (missing) values?
//
print(diabetes_data.isnull().sum())              RESULT:
                                                              	0
                                      Pregnancies	              0
                                      Glucose	                  0
                                      BloodPressure	            0
                                      SkinThickness	            0
                                      Insulin	                  0
                                      BMI	                      0
                                      DiabetesPedigreeFunction	0
                                      Age	                      0
                                      Outcome	                  0
  6. If you answered no to the question above, not so fast! While it’s technically true that none of the columns contain null values, that doesn’t necessarily mean that the data isn’t 
missing any values. When exploring data, you should always question your assumptions and try to dig deeper. To investigate further, calculate summary statistics on diabetes_data using 
the .describe() method.
//
print(diabetes_data.describe())                  RESULT:
                                          	Pregnancies	        Glucose	          BloodPressure	      SkinThickness      	Insulin	            BMI	                DiabetesPedigreeFunction	Age
                                      count	768.0	              768.0	            768.0	              768.0	              768.0	              768.0	              768.0                    	768.0
                                      mean	3.8450520833333335	120.89453125	    69.10546875	        20.536458333333332	79.79947916666667	  31.992578124999998	0.47187630208333325	      33.240885416666664
                                      std	  3.3695780626988694	31.97261819513622	19.355807170644777	15.952217567727637	115.24400235133817	7.884160320375446  	0.3313285950127749	      11.760231540678685
                                      min	  0.0	                0.0	              0.0	                0.0	                0.0	                0.0	                0.078                    	21.0
                                      25%  	1.0	                99.0	            62.0	              0.0	                0.0	                27.3	              0.24375	                  24.0
                                      50%	  3.0	                117.0            	72.0	              23.0	              30.5              	32.0	              0.3725	                  29.0
                                      75%	  6.0	                140.25          	80.0	              32.0	              127.25	            36.6	              0.62625                  	41.0
                                      max	  17.0	              199.0	            122.0	              99.0	              846.0               67.1	              2.42	                    81.0
  7. Looking at the summary statistics, do you notice anything odd about the following columns?
Glucose, BloodPressure, SkinThickness, Insulin, BMI
//
Yes, 'min' value is 0.0 in all of these columns. 
  8. Do you spot any other outliers in the data?
//
Yes, 'max' in 'Pregnancies" column is 17. Don't believe woman's body might be physically capable for this.
  9. Let’s see if we can get a more accurate view of the missing values in the data. Use the following code to replace the instances of 0 with NaN in the five columns mentioned:
diabetes_data[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']] = diabetes_data[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']].replace(0,np.nan)
//
diabetes_data[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']] = diabetes_data[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']].replace(0,np.nan)
  10. Next, check for missing (null) values in all of the columns just like you did in Step 5. Now how many missing values are there?
//
print(diabetes_data.isnull().sum())              RESULT:
                                                              	0
                                      Pregnancies              	0
                                      Glucose	              	  5
                                      BloodPressure	            35
                                      SkinThickness	            227
                                      Insulin	              	  374
                                      BMI	              	      11
                                      DiabetesPedigreeFunction	0
                                      Age	              	      0
                                      Outcome	              	  0
print(diabetes_data.info())                      RESULT:
                                      <class 'pandas.core.frame.DataFrame'>
                                      RangeIndex: 768 entries, 0 to 767
                                      Data columns (total 9 columns):
                                      Pregnancies                 768 non-null int64
                                      Glucose                     763 non-null float64
                                      BloodPressure               733 non-null float64
                                      SkinThickness               541 non-null float64
                                      Insulin                     394 non-null float64
                                      BMI                         757 non-null float64
                                      DiabetesPedigreeFunction    768 non-null float64
                                      Age                         768 non-null int64
                                      Outcome                     768 non-null object
                                      dtypes: float64(6), int64(2), object(1)
                                      memory usage: 54.1+ KB
                                      None
  11. Let’s take a closer look at these rows to get a better idea of why some data might be missing. Print out all of the rows that contain missing (null) values.
//
print(diabetes_data[diabetes_data.isnull().any(axis=1)])
                                                  RESULT:
                                          	Pregnancies	Glucose	BloodPressure	SkinThickness	Insulin	BMI	  DiabetesPedigreeFunction	Age	Outcome
                                          0	6	          148.0	  72.0	        35.0	        nan	    33.6	0.627	                    50	1
                                          1	1          	85.0	  66.0	        29.0	        nan	    26.6	0.35100000000000003	      31	0
                                          2	8	          183.0	  64.0	        nan	          nan	    23.3	0.672	                    32	1
                                          5	5          	116.0	  74.0	        nan	          nan	    25.6	0.201	                    30	0
                                          7	10        	115.0	  nan	          nan	          nan	    35.3	0.134	                    29	0
                                          9	8	          125.0	  96.0	        nan          	nan	    nan	  0.23199999999999998      	54	1
  12. Go through the rows with missing data. Do you notice any patterns or overlaps between the missing data?
//
Most of the missing data is from the column "Insulin" and some rows have missing data in other columns too. 
"One thing you might notice is that most rows with missing data have missing values in more than one column. In fact, every single row with at least one missing value also has a missing 
value in the insulin column. This is a clue as to why this data is missing! If patients did not have their insulin measured, why might they also not have had these other measurements taken?
Depending on how much data is missing, you might choose to remove specific rows or impute the missing values somehow."
  13. Next, take a closer look at the data types of each column in diabetes_data. Does the result match what you would expect?
//
print(diabetes_data.dtypes)                      RESULT:
                                                              	0
                                      Pregnancies	              int64
                                      Glucose	                  float64
                                      BloodPressure	            float64
                                      SkinThickness	            float64
                                      Insulin	                  float64
                                      BMI	                      float64
                                      DiabetesPedigreeFunction	float64
                                      Age	                      int64
                                      Outcome	                  object
I gues Glucose, BloodPressure and SkinThickness could also be int data type. Also, not sure why Outcome is object.
  14. To figure out why the Outcome column is of type object (string) instead of type int64, print out the unique values in the Outcome column.
//
print(diabetes_data['Outcome'].unique())        RESULT:
                                                ['1' '0' 'O']
  15. How might you resolve this issue?
// 
Replace 'O' with '0' and convert Outcome to int64 data type.
diabetes_data['Outcome'] = diabetes_data['Outcome'].replace(['O'], '0')
print(diabetes_data['Outcome'].unique())        RESULT:
                                      ['1' '0']
diabetes_data['Outcome'] = diabetes_data['Outcome'].astype('int64')
print(diabetes_data.dtypes)                     RESULT:                            
                                                              	0
                                      Pregnancies	              int64
                                      Glucose	                  float64
                                      BloodPressure	            float64
                                      SkinThickness	            float64
                                      Insulin                  	float64
                                      BMI	                      float64
                                      DiabetesPedigreeFunction	float64
                                      Age	                      int64
                                      Outcome                  	int64
