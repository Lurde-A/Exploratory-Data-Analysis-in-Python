The sample we’ll be working with contains responses to the following:
influence:   yes = I have a natural talent for influencing people; no = I am not good at influencing people.
blend_in:    yes = I prefer to blend in with the crowd;            no = I like to be the center of attention.
special:     yes = I think I am a special person;                  no = I am no better or worse than most people.
leader:      yes = I see myself as a good leader;                  no = I am not sure if I would make a good leader.
authority:   yes = I like to have authority over other people;     no = I don’t mind following orders.

                                      INTRODUCTION
  1. Data from the Narcissistic Personality Inventory (NPI) has been loaded in the workspace as a dataframe named npi. Print the first five rows of this dataframe using the .head().
Which of these variables do you think might be associated?
GIVEN:
import pandas as pd
import codecademylib3
npi = pd.read_csv("npi_sample.csv")
//
print(npi.head())                                       RESULT:
                                                      	influence	blend_in	special	leader	authority
                                                      0	no	      yes	      yes	    yes	    yes
                                                      1	no	      yes	      no	    no	    no
                                                      2	yes	      no	      yes	    yes	    yes
                                                      3	yes	      no	      no	    yes	    yes
                                                      4	yes	      yes	      no	    yes	    no

                                      CONTINGENCY TABLES: FREQUENCIES
  2. Do you think there will be an association between special (whether or not a person sees themself as “special”) and authority (whether or not a person likes to have authority)? 
Create a contingency table for these two variables and store the table as special_authority_freq, then print out the result. Based on this table, do you think the variables are associated?
//
special_authority_freq = pd.crosstab(npi.special, npi.authority)
print(special_authority_freq)                           RESULT:
                                                      	authority    no   yes
                                                      	special              
                                                      	no         4069  1905
                                                      	yes        2229  2894      People who don't see themselves as a "special", neither think they have authority over others.

                                      CONTINGENCY TABLES: PROPORTIONS
  3. The contingency table of frequencies for special (whether or not a person sees themself as “special”) and authority (whether or not a person likes to have authority) is saved for you 
as special_authority_freq. Convert this table of frequencies to a table of proportions and save the result as special_authority_prop, then print it out.
GIVEN: 
import pandas as pd
import numpy as np
npi = pd.read_csv("npi_sample.csv")
special_authority_freq = pd.crosstab(npi.special, npi.authority)
//
special_authority_prop = special_authority_freq / len(npi)
print(special_authority_prop)                           RESULT:
                                                      	authority        no       yes
                                                      	special                      
                                                      	no         0.366676  0.171668
                                                      	yes        0.200865  0.260791

                                      MARGINAL PROPORTIONS
  4. The solution code from the previous exercise has been provided in script.py to create a contingency table of proportions (saved as special_authority_prop) for the special and 
authority columns. Use this to calculate the marginal proportions for the authority variable and save the result as authority_marginals.
Print out authority_marginals. Do more people like to have authority over people or not?
GIVEN:
import numpy as np
npi = pd.read_csv("npi_sample.csv")
  # save the table of frequencies as special_authority_freq:
special_authority_freq = pd.crosstab(npi.special, npi.authority)
  # save the table of proportions as special_authority_prop:
special_authority_prop = special_authority_freq/len(npi)
//
authority_marginals = special_authority_prop.sum(axis=0)
print(authority_marginals)                              RESULT:
                                                      	authority
                                                      	no     0.567541
                                                      	yes    0.432459
  5. Use special_authority_prop to calculate the marginal proportions for the special variable and save the result as special_marginals. Print out special_marginals. Do more people see 
themselves as special or not special?
//
special_marginals = special_authority_prop.sum(axis=1)
print(special_marginals)                                RESULT:
                                                      	special
                                                      	no     0.538344
                                                      	yes    0.461656

                                      EXPECTED CONTINGENCY TABLES
GIVEN:
import pandas as pd
import numpy as np
from scipy.stats import chi2_contingency
npi = pd.read_csv("npi_sample.csv")
special_authority_freq = pd.crosstab(npi.special, npi.authority)
print("observed contingency table:")
print(special_authority_freq)
  # calculate the expected contingency table if there's no association and save it as expected
  # print out the expected frequency table
print("expected contingency table (no association):")
  6. The contingency table of frequencies for the special and authority questions is saved for you in script.py as special_authority_freq. Use the chi2_contingency() function 
to calculate the expected frequency table for these two questions if there were no association. Save the result as expected.
  7. Use np.round() to print out the expected contingency table, with values rounded to the nearest whole number. Compare this to the observed frequency table. 
How much do the numbers in these tables differ?
//
# calculate the expected contingency table if there's no association and save it as expected
chi2, pval, dof, expected = chi2_contingency(special_authority_freq)
print("expected contingency table (no association):")
print(np.round(expected))                               RESULT:
                                                      	expected contingency table (no association):
                                                      	[[3390. 2584.]
                                                       	[2908. 2215.]]

                                      THE CHI-SQUARE STATISTIC
  8. The contingency table of frequencies for the special and authority questions is saved for you in script.py as special_authority_freq. Use the chi2_contingency() function 
to calculate Chi-Square statistic for these two variables. Save the result as chi2 and print it out. Do these variables appear to be associated?
GIVEN:
import pandas as pd
import numpy as np
from scipy.stats import chi2_contingency
npi = pd.read_csv("npi_sample.csv")
special_authority_freq = pd.crosstab(npi.special, npi.authority)
//
print(special_authority_freq)
chi2, pval, dof, expected = chi2_contingency(special_authority_freq)         RESULT:
                                                                           	 authority    no   yes
                                                      	                   	 special              
                                                      	                   	 no         4069  1905
                                                      	                   	 yes        2229  2894
print(chi2)                                              RESULT:
                                                      	 679.1219526170606

                                      REVIEW
GIVEN:
import pandas as pd
import codecademylib3
npi = pd.read_csv("npi_sample.csv")
print(npi.head())
  1. Which other pairs of questions might be associated (or not)? Use the workspace and your newfound skills to investigate for yourself!
//
from scipy.stats import chi2_contingency
  #association between preference to blend_in and seeing yourself as a leader 
blend_leader_freq = pd.crosstab(npi.blend_in, npi.leader)
print(blend_leader_freq)                               RESULT:
                                                       leader      no   yes
                                                       blend_in            
                                                       no        1124  2275
                                                       yes       4251  3447
chi2, pval, dof, expected = chi2_contingency(blend_leader_freq)
print(expected)                                        RESULT:
                                                       [[1646.35712355 1752.64287645]
                                                        [3728.64287645 3969.35712355]]
print(chi2)                                            RESULT:
                                                       462.44980106783
//
  #association between liking to have authority over others and seeing yourself as special person
special_authority_freq = pd.crosstab(npi.special, npi.authority)
print(special_authority_freq)                          RESULT:
                                                       authority    no   yes
                                                       special              
                                                       no         4069  1905
                                                       yes        2229  2894
chi2, pval, dof, expected = chi2_contingency(special_authority_freq)
print(expected)                                        RESULT:
                                                       [[3390.48860052 2583.51139948]
                                                        [2907.51139948 2215.48860052]]
print(chi2)                                            RESULT:
                                                       679.1219526170606
